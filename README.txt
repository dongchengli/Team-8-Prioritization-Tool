Prioritization tool

Spring 2017

Professor Zhang

Step 1:

Download Prioritization Tool from the GitHub repository, 
https://github.com/dongchengli/Team-8-Prioritization-Tool  
Step 2:

Put Downloaded Team-8-Prioritization-Tool-master.zip file inside a new directory or any directory (Directory named simple and with no space between words is recommended, such as “Tool”), and extract the zip file.

Step 3:

From the commend line, first check the maven, type “mvn –v”, if no maven installed, it need to be installed

Step 4:

In the Commend Line Direct to the directory of the CodeCoverage folder inside of the Team-8-Prioritization-Tool-master folder, (such as “cd /Users/Dongcheng/Desktop/Tool/Team-8-Prioritization-Tool-master/PrioritizationTool/CodeCoverage”)
type the following command 

mvn install

And it will show build successfully. 

Step 5:

Go to https://github.com/julman99/gson-fire, next download Github test project. then put Downloaded gson-fire-master.zip file inside a new directory or any directory, and extract the zip file.

Step 6:

Open the pom.xml file inside the test program then add “dependencies” (such as add following right after <dependencies> tag)

*******************************************************************************************************************

    <dependency>
    	<groupId>edu.utdallas</groupId>
    	<artifactId>code-coverage</artifactId>
    	<version>1.0-SNAPSHOT</version>
    	<scope>test</scope>
    </dependency>
    <dependency>
    	<groupId>org.ow2.asm</groupId>
    	<artifactId>asm-all</artifactId>
    	<version>5.1</version>
    	<scope>test</scope>
    </dependency>

*******************************************************************************************************************

Step 7:

Also add the “plugins” to pom.xml file (such as add following right after     <build>
        										<plugins> )
*******************************************************************************************************************

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <argLine>-javaagent:/YourPath/code-coverage-1.0-SNAPSHOT.jar=${project.groupId}</argLine>
                    <properties>
                        <property>
                            <name>listener</name>
                            <value>edu.utdallas.JUnitExecutionListener</value>
                        </property>
                    </properties>

                </configuration>
            </plugin>

*******************************************************************************************************************

The “YourPath” here, is the path of the “code-coverage-1.0-SNAPSHOT.jar” file, which we generated by mvn install the PrioritizationTool, this jar file is created under the target directory of the CodeCoverage (such as /Users/Dongcheng/Desktop/Testprogram/Team-8-Prioritization-Tool-master/PrioritizationTool/CodeCoverage/target/)

First Run
Step 8: 

Open the test project(such as gson-fire) in command line (or Direct to the directory of the pom.xml of the test project) and type the following commands respectfully 

1) mvn clean
2) mvn install

In the console it will output the default class execution order and calculates the total and additional prioritization for each test method

Step 9: 

Inside test project, First make two copies of the current pom.xml file, one for Total Strategy and one for Additional strategy, rename them according to “pom_test_AS.xml” for Additional strategy and “pom_test_TS.xml” for Total strategy. 

Then we add “Includes” right after the <configuration> tag and right before the <argLine> tag inside of the “maven-surefire-plugin”.

In the pom_test_TS.xml, and we add 
*******************************************************************************************************************
<includes><include>**/FeatureTestSuite.java</include></includes>
*******************************************************************************************************************
In the pom_test_AS.xml, and we add 
*******************************************************************************************************************
<includes><include>**/FeatureTestSuiteAdditional.java</include></includes>
*******************************************************************************************************************

Step 10:
 
Finally, if we want to test program using Total strategy, under the directory of the test program, we just type 
“mvn test -f pom_test_TS.xml” to the commend line 
or if we want to test program using Additional strategy we just type 
“mvn test -f pom_test_AS.xml” to the commend line

In the console it will output the manipulated class execution order using the choice of user



Step 11:

To compare the time to detect the first bug of the original execution and the prioritized execution. First, we manually create bug for the test program.
(Such as in the test program, gson-fire, under src/main/java/io/gsonfire/gson in the DateUnixtimeSecondsTypeAdapter class, we increase the value of the denominator of the return value from 1000L to 1000000L. It causes one failure during the program execution)

Then, just run the program with 
mvn test , for the original execution
mvn test -f pom_test_TS.xml , or
mvn test -f pom_test_TS.xml , for the prioritized execution. 


